#!/bin/sh

DIR=`pwd`

. "$DIR/versions.inc"

DO_UNPACK=YES
DO_HEADERS=YES
DO_BINUTILS=YES
DO_GCC=YES
DO_UCLIBC=YES
DO_GCCCPP=YES

HOST_NCPU=1
if [ -f /proc/cpuinfo ] ; then
    HOST_NCPU=`grep -c processor /proc/cpuinfo`
    [ $HOST_NCPU -lt 1 ] && HOST_NCPU=1
fi

UCLIBCVER="$UCLIBCVER1"
KERNELVER="$KERNELVER1"
if [ "$1" = "--new" ] ; then
    UCLIBCVER="$UCLIBCVER2"
    KERNELVER="$KERNELVER2"
fi

ID_BINUTILS="binutils-$BINUTILSVER"
ID_GCC="gcc-$GCCVER"
ID_UCLIBC="uClibc-$UCLIBCVER"
ID_TOOLCHAIN="toolchain-$KERNELVER"

export LC_PAPER=en_EN.UTF-8
export LC_ADDRESS=en_EN.UTF-8
export LC_MONETARY=en_EN.UTF-8
export LC_TELEPHONE=en_EN.UTF-8
export LC_IDENTIFICATION=en_EN.UTF-8
export LC_MEASUREMENT=en_EN.UTF-8
export LANGUAGE=en_EN.UTF-8:en
export LC_NAME=en_EN.UTF-8

export LC_COLLATE=
export LC_NUMERIC=
export LC_MESSAGES=
export LC_CTYPE=
export LC_TIME=

export LANG=en_US
export LC_ALL=POSIX

export TARGET="mipsel-linux-uclibc"
export TARGET_DIR="$DIR/src/$TARGET-toolchain"
export ROOTDIR="$DIR"
export PREFIX="$DIR/$ID_TOOLCHAIN"
export PATH="${PATH}:$PREFIX/bin:$PREFIX/lib"
export CC=gcc

##################################TUNE FOR CURRENT VERSION GCC BUILD####################################

HOSTGCCVER=`gcc --version | grep "(GCC)" | awk {' print $3 '} | cut -f -2 -d .`
if [ "$HOSTGCCVER" = "4.5" ] || [ "$HOSTGCCVER" = "4.6" ] || [ "$HOSTGCCVER" = "4.7" ]; then
    export CFLAGS="-g -O2 -Wno-pointer-sign -Wno-unused-but-set-variable -Wno-trigraphs -Wno-format-security"
fi

EXT_OPT="--disable-sanity-checks --disable-werror"
EXT_OPT="$EXT_OPT --disable-lto --enable-ld=yes --enable-gold=no"
if [ "$GCCVER" = "gcc-4.6.0" ] || [ "$GCCVER" = "gcc-4.6.1" ] || [ "$GCCVER" = "gcc-4.6.2" ] || [ "$GCCVER" = "gcc-4.6.3" ]; then
    EXT_OPT="$EXT_OPT --disable-biendian --disable-softfloat"
    EXT_OPT="$EXT_OPT --disable-libquadmath --disable-libquadmath-support"
fi

#####################################CHECK TLS SUPPORT FOR UCLIBC#######################################

UCLIBCM=`echo $UCLIBCVER | cut -f3 -d '.' `

TLS_OPT="--disable-tls --disable-threads"
if [ $UCLIBCM -ge 32 ] ; then
    eval `grep \^UCLIBC_HAS_TLS= "$TARGET_DIR/${ID_UCLIBC}.config"`
    [ "$UCLIBC_HAS_TLS" = "y" ] && TLS_OPT="--enable-tls --enable-threads=posix"
fi

#########################################################################################################

mkdir -p "$PREFIX"
cd "$TARGET_DIR"

if [ "$DO_UNPACK" = "YES" ]; then
    echo "=================REMOVE-OLD-BUILD-TREE=================="
    rm -rf build-*
    echo "=================EXTRACT-KERNEL-HEADERS================="
    rm -rf include
    tar xjf kernel-headers-${KERNELVER}.tar.bz2
    if [ $UCLIBCM -le 28 ] ; then
        tar xjf uClibc-$UCLIBCVER-headers.tar.bz2
    fi
    echo "====================EXTRACT-BINUTILS===================="
    rm -rf $ID_BINUTILS
    tar xjf $ID_BINUTILS.tar.bz2
    echo "=====================EXTRACT-UCLIBC====================="
    rm -rf $ID_UCLIBC
    tar xjf $ID_UCLIBC.tar.bz2
    echo "======================EXTRACT-GCC======================="
    rm -rf $ID_GCC
    tar xjf $ID_GCC.tar.bz2
    echo "===================PATCHING-BINUTILS===================="
    cd $ID_BINUTILS
    for i in `ls ../patches/${ID_BINUTILS}*.patch 2>/dev/null` ; do
        [ -f ${i} ] && patch -p1 < ${i}
    done
    cd ..
    echo "=====================PATCHING-GCC======================="
    cd $ID_GCC
    for i in `ls ../patches/${ID_GCC}*.patch 2>/dev/null` ; do
        [ -f ${i} ] && patch -p1 < ${i}
    done
    cd ..
    echo "====================PATCHING-UCLIBC====================="
    cd $ID_UCLIBC
    for i in `ls ../patches/${ID_UCLIBC}*.patch 2>/dev/null` ; do
        [ -f ${i} ] && patch -p1 < ${i}
    done
    cd ..
fi

if [ "$DO_HEADERS" = "YES" ]; then
    echo "=====================BUILD-C-HEADERS===================="
    rm -rf "$PREFIX/include"
    rm -rf "$PREFIX/usr/include"
    cp -rf "$TARGET_DIR/include" "$PREFIX/include"
    if [ $UCLIBCM -gt 28 ] ; then
        cp -fv ${ID_UCLIBC}.config $ID_UCLIBC/.config
        make -C $ID_UCLIBC install_headers
    fi
    mkdir -p "$PREFIX/usr"
    ln -sf ../include "$PREFIX/usr/include"
fi

if [ "$DO_BINUTILS" = "YES" ]; then
    echo "=====================BUILD-BINUTILS====================="
    mkdir -p build-binutils && cd build-binutils
    (../$ID_BINUTILS/configure --target=$TARGET --prefix="$PREFIX" \
        --with-sysroot="$PREFIX" --with-build-sysroot="$PREFIX" --disable-nls && \
    make -j${HOST_NCPU} && \
    make install) || exit 1
    cd ..
fi

if [ "$DO_GCC" = "YES" ]; then
    echo "=====================BUILD-GCC-C========================"
    mkdir -p build-gcc-bootstrap && cd build-gcc-bootstrap
    (../$ID_GCC/configure \
        --target=$TARGET --prefix="$PREFIX" \
        --with-gnu-ld --with-gnu-as \
        --disable-shared \
        $TLS_OPT --disable-libmudflap --disable-libssp $EXT_OPT \
        --disable-libgomp --disable-nls \
        --with-sysroot="$PREFIX" \
        --enable-version-specific-runtime-libs --enable-languages=c && \
    make -j${HOST_NCPU} && \
    make install) || exit 1
    cd ..
fi

if [ "$DO_UCLIBC" = "YES" ]; then
    echo "=====================BUILD-UCLIBC======================="
    cp -fv ${ID_UCLIBC}.config $ID_UCLIBC/.config
    cd $ID_UCLIBC
    (make -j${HOST_NCPU} && \
     make install) || exit 1
    cd ..
fi

if [ "$DO_GCCCPP" = "YES" ]; then
    echo "====================BUILD-GCC-CPP======================="
    mkdir -p build-gcc-bootstrap-cpp && cd build-gcc-bootstrap-cpp
    (../$ID_GCC/configure \
        --target=$TARGET --prefix="$PREFIX" \
        --with-gnu-ld --with-gnu-as \
        --disable-shared \
        $TLS_OPT --disable-libmudflap --disable-libssp $EXT_OPT \
        --disable-libgomp --disable-nls \
        --with-sysroot="$PREFIX" \
        --enable-version-specific-runtime-libs --enable-languages=c++ && \
    make -j${HOST_NCPU} all-host all-target-libgcc all-target-libstdc++-v3 && \
    make install-host install-target-libgcc install-target-libstdc++-v3) || exit 1
    cd ..
fi

echo "======================All IS DONE!========================="

